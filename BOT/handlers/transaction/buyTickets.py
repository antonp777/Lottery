from aiogram import Router, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext



from BOT.keyboards.inlineKeyboard import inlineKeyboardGMenuCabinet
from BOT.util.deleteMessage import *
from BOT.util.callbackData import *
from BOT.keyboards.inlineKeys import inlineKeyGeneralMenu, inlineKeyPeredumalGeneralMenu

from BOT.util.generateComment import generate_string
from app.Models.ModelsEnum import TransExpenseStatus, TicketStatus, TransComingStatus
from app.Schemas.STicket import STicket, STicketAdd
from app.Schemas.STransExpence import STransactionExpenseAdd
from app.Schemas.STransactionComing import STransactionComing, STransactionComingAdd
from app.routers.routerCard import get_card_random
from app.routers.routerLottery import result_lottery
from app.routers.routerTicket import add_tickets
from app.routers.routerTransactionComing import add_trans_coming_with_id
from app.routers.routerTransactionExpence import add_trans_expence, add_trans_expence_with_id
from app.routers.routerUser import get_balance_user, get_user_by_chat_id, update_username_in_user, \
    update_last_mes_bot_in_user

buyTickets = Router()


class BuyTickets(StatesGroup):
    count_tickets = State()
    count_tickets_error = State()
    confirm_buy = State()
    confirm_pay = State()


# 1. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@buyTickets.callback_query(LoterryInfo.filter(F.id > 0), StateFilter(None))
@buyTickets.callback_query(F.data == 'return_buy_tickets', BuyTickets.count_tickets_error)
async def buy_tickets(callback: CallbackQuery,
                      bot: Bot,
                      state: FSMContext,
                      callback_data: LoterryInfo = None):
    keyboard = InlineKeyboardBuilder().row(inlineKeyGeneralMenu)

    ost_tickets_for_buy: int

    if callback_data:
        await state.update_data(id_lottery=callback_data.id,
                                price_ticket=callback_data.priceTicket,
                                ost_tickets_for_buy=callback_data.ostTicketForBuy)

        ost_tickets_for_buy = callback_data.ostTicketForBuy
    else:
        data_state = await state.get_data()
        ost_tickets_for_buy = data_state['ost_tickets_for_buy']

    await delete_message_bot(callback, bot)
    msg = await callback.message.answer(
        f'‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ <b>{ost_tickets_for_buy} –±–∏–ª.</b>\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 500 —à—Ç.',
        reply_markup=keyboard.as_markup()
    )
    await update_last_mes_bot_in_user(chat_id=callback.from_user.id, mes_id=msg.message_id)

    await state.set_state(BuyTickets.count_tickets)



# 2.1. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤
@buyTickets.message(F.text.regexp(r"^(\d+)$"), BuyTickets.count_tickets)
async def count_tickets_for_buy(message: Message,
                                bot: Bot,
                                state: FSMContext):
    data_state = await state.get_data()

    # –ü–†–û–í–ï–†–ö–ê –ù–ê –ö–û–õ–ò–ß–ï–°–¢–í–û –ë–ò–õ–ï–¢–û–í
    if int(message.text) <= data_state['ost_tickets_for_buy'] and int(message.text) < 500:

        await state.update_data(count_tickets=int(message.text))
        keyboard = InlineKeyboardBuilder().add(inlineKeyPeredumalGeneralMenu,
                                               InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ',
                                                                    callback_data='buyTickets_ok')
                                               )

        await delete_message_user_bot(message, bot)
        await state.set_state(BuyTickets.confirm_buy)

        data_state = await state.get_data()

        await message.answer(
            f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å <b>{message.text}</b> –±–∏–ª.\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{data_state['price_ticket'] * int(message.text)}</b> —Ä—É–±.",
            reply_markup=keyboard.as_markup()
        )
    else:
        text = '–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤'
        await count_tickets_for_buy_error(message, bot, state, text)


# 2.2. –û–®–ò–ë–ö–ê –ü–†–ò –í–í–û–î–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê –ë–ò–õ–ï–¢–û–í (–í–í–ï–î–ï–ù–û –ù–ï –ß–ò–°–õ–û)
@buyTickets.message(~F.text.regexp(r"^(\d+)$"), BuyTickets.count_tickets)
async def count_tickets_for_buy_error(message: Message,
                                      bot: Bot,
                                      state: FSMContext,
                                      text: str = None):
    await state.set_state(BuyTickets.count_tickets_error)

    if text is None:
        text = '‚ÄºÔ∏è –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!\nK–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!'
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [inlineKeyPeredumalGeneralMenu,
             InlineKeyboardButton(text='‚úçÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥', callback_data='return_buy_tickets')
             ]
        ]
    )
    await delete_message_user_bot(message, bot)

    await message.answer(text, reply_markup=keyboard)



# 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç User/–ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤ —Å –±–∞–ª–∞–Ω—Å–∞ User
@buyTickets.callback_query(F.data == 'buyTickets_ok', BuyTickets.confirm_buy)
async def confirm_buy_at_user(callback: CallbackQuery,
                              bot: Bot,
                              state: FSMContext):
    data_state = await state.get_data()

    coast_tickets: int = data_state['count_tickets'] * data_state['price_ticket']
    balance_user = await get_balance_user(callback.from_user.id)

    user = await get_user_by_chat_id(callback.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ username –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if callback.from_user.username != user.username:
        await update_username_in_user(chat_id=callback.from_user.id, username=callback.from_user.username)

    # –ï—Å–ª–∏ –ë–ê–õ–ê–ù–° User –ú–ï–ù–¨–®–ï —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤
    if balance_user < coast_tickets:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–∑ –ë–î
        card = await get_card_random()
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        comment = generate_string(8)
        # –°—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        sum_for_pay = coast_tickets - balance_user

        await state.set_state(BuyTickets.confirm_pay)
        await state.update_data(card=card[1], card_number=card[0], comment=comment, sum_for_pay=sum_for_pay,
                                id_user=user.id)

        keyboard = InlineKeyboardBuilder().add(inlineKeyPeredumalGeneralMenu,
                                               InlineKeyboardButton(
                                                   text="‚úÖ –û–ø–ª–∞—Ç–∏–ª ‚úÖ",
                                                   callback_data='confirm_pay'
                                               )).adjust(2)

        await callback.message.answer(
            f'üíµ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{sum_for_pay}</b> —Ä—É–±.\n'
            f'üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: <b>{card[0]}</b>\n'
            f'‚ùóÔ∏è –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>—Ç–æ—á–Ω—É—é —Å—É–º–º—É</b> –∏ <b>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ</b> —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: <b>{comment}</b> ‚ùóÔ∏è\n\n'
            f'<em>–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É 30 –º–∏–Ω—É—Ç, –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏, –æ–ø–ª–∞—Ç–∏—Ç–µ –≤ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –ª–∏–±–æ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é</em>',
            reply_markup=keyboard.as_markup()
        )
        await delete_message_bot(callback, bot)

    # –ï—Å–ª–∏ –ë–ê–õ–ê–ù–° User –ë–û–õ–¨–®–ï —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –†–ê–°–•–û–î–ê
        trans_expense = STransactionExpenseAdd(
            sum=coast_tickets,
            count_tickets=int(data_state['count_tickets']),
            status=TransExpenseStatus.OK,
            id_user=user.id,
            id_lottery=int(data_state['id_lottery'])
        )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –†–∞—Å—Ö–æ–¥–∞ –≤ –ë–î
        id_trans = await add_trans_expence_with_id(trans_expense)

        # –°–æ–∑–¥–∞–Ω–∏–µ –ë–∏–ª–µ—Ç–æ–≤ –≤ –ë–î
        tickets = []
        i = 1
        while i <= data_state['count_tickets']:
            ticket = STicketAdd(
                id_user=user.id,
                isFinish=False,
                id_lottery=data_state['id_lottery'],
                id_trans_expense=id_trans,
                status=TicketStatus.OK
            )
            tickets.append(ticket)
            i += 1

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ë–∏–ª–µ—Ç–æ–≤ –≤ –ë–î
        await add_tickets(tickets)

        await delete_message_bot(callback, bot)

        await callback.message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {data_state['count_tickets']} —à—Ç. –±–∏–ª–µ—Ç–æ–≤",
                                      reply_markup=inlineKeyboardGMenuCabinet)

        # –†–æ–∑—ã–≥—Ä—ã—à –ª–æ—Ç–µ—Ä–µ–∏
        await result_lottery(data_state['id_lottery'])
        await state.clear()


# 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ Admin
@buyTickets.callback_query(F.data == 'confirm_pay', BuyTickets.confirm_pay)
async def post_trans_to_admin(callback: CallbackQuery,
                              bot: Bot,
                              state: FSMContext):
    data_state = await state.get_data()

    # –û—Ç–≤–µ—Ç –¥–ª—è User
    msg = await callback.message.answer(
        'üîÅ –í–∞—à–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è!\n‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.')
    id_mes = msg.message_id
    await delete_message_bot(callback, bot)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –†–ê–°–•–û–î–ù–û–ô —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –û–ñ–ò–î–ê–ù–ò–ï

    trans_expense = STransactionExpenseAdd(
        id_user=data_state['id_user'],
        sum=data_state['count_tickets'] * data_state['price_ticket'],
        count_tickets=data_state['count_tickets'],
        id_lottery=data_state['id_lottery'],
        status=TransExpenseStatus.WAIT
    )

    id_trans_expense = await add_trans_expence_with_id(trans_expense)
    ######################################

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ü–†–ò–•–û–î–ù–û–ô —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –û–ñ–ò–î–ê–ù–ò–ï
    trans_coming = STransactionComingAdd(
        sum=data_state['sum_for_pay'],
        comment=data_state['comment'],
        status=TransComingStatus.WAIT,
        message_id=id_mes,
        id_trans_expence_info=id_trans_expense,
        id_user=data_state['id_user'],
        id_card=int(data_state['card'])
    )
    await add_trans_coming_with_id(trans_coming)
    ##############################

    await state.clear()
