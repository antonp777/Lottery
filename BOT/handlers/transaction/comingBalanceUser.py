from aiogram import Router, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext


from BOT.util.deleteMessage import *
from BOT.util.callbackData import *
from BOT.keyboards.inlineKeys import inlineKeyGeneralMenu, inlineKeyCabinetMenu, inlineKeyPeredumalCabinetMenu
from BOT.util.generateComment import generate_string
from app.Models.ModelsEnum import TransComingStatus
from app.Schemas.STransactionComing import STransactionComingAdd
from app.routers.routerCard import get_card_random
from app.routers.routerTransactionComing import add_trans_coming
from app.routers.routerUser import get_user_by_chat_id, update_username_in_user, update_last_mes_bot_in_user

comingBalanceUser = Router()


class ComingBalance(StatesGroup):
    sum_coming = State()
    sum_coming_error = State()
    confirm_pay = State()


# 1. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@comingBalanceUser.message(F.text == 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å', StateFilter(None))
@comingBalanceUser.callback_query(F.data == 'return_sum_coming', ComingBalance.sum_coming_error)
async def query_sum_coming(message: Message | CallbackQuery, bot: Bot, state: FSMContext):
    await state.set_state(ComingBalance.sum_coming)
    text = '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è'
    if isinstance(message, Message):
        await delete_message_user_bot(message, bot)
        msg = await message.answer(text,
                             reply_markup=InlineKeyboardMarkup(
                                 inline_keyboard=[[inlineKeyPeredumalCabinetMenu]]))
        await update_last_mes_bot_in_user(chat_id=message.from_user.id, mes_id=msg.message_id)
    else:
        await delete_message_bot(message, bot)
        msg = await message.message.answer(text,
                                     reply_markup=InlineKeyboardMarkup(
                                         inline_keyboard=[[inlineKeyPeredumalCabinetMenu]]))
        await update_last_mes_bot_in_user(chat_id=message.from_user.id, mes_id=msg.message_id)

# 2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
@comingBalanceUser.message(F.text.regexp(r"^(\d+)$"), ComingBalance.sum_coming)
async def sum_coming(message: Message, bot: Bot, state: FSMContext):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–∑ –ë–î
    card = await get_card_random()
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    comment = generate_string(8)

    # id User –≤ –ë–î
    user = await get_user_by_chat_id(chat_id=message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ username –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if message.from_user.username != user.username:
        await update_username_in_user(chat_id=message.from_user.id, username=message.from_user.username)

    await state.set_state(ComingBalance.confirm_pay)
    await state.update_data(card=card[1],
                            card_number=card[0],
                            comment=comment,
                            sum_coming=message.text,
                            id_user=user.id)

    keyboard = InlineKeyboardBuilder().add(inlineKeyPeredumalCabinetMenu,
                                           InlineKeyboardButton(
                                               text="‚úÖ –û–ø–ª–∞—Ç–∏–ª ‚úÖ",
                                               callback_data='confirm_pay'
                                           )).adjust(2)

    await delete_message_user_bot(message, bot)
    await message.answer(
        f'üíµ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{message.text}</b> —Ä—É–±.\n'
        f'üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: <b>{card[0]}</b>\n'
        f'‚ùóÔ∏è –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>—Ç–æ—á–Ω—É—é —Å—É–º–º—É</b> –∏ <b>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ</b> —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: <b>{comment}</b>Ô∏èÔ∏è ‚ùóÔ∏è',
        reply_markup=keyboard.as_markup()
    )


# 2.1. –û–®–ò–ë–ö–ê –ü–†–ò –í–í–û–î–ï –°–£–ú–ú–´ –ü–û–ü–û–õ–ù–ï–ù–ò–Ø (–í–í–ï–î–ï–ù–û –ù–ï –ß–ò–°–õ–û)
@comingBalanceUser.message(~F.text.regexp(r"^(\d+)$"), ComingBalance.sum_coming)
async def error_sum_coming(message: Message, bot: Bot, state: FSMContext):
    await state.set_state(ComingBalance.sum_coming_error)

    text = '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!\nK–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!'
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [inlineKeyPeredumalCabinetMenu,
             InlineKeyboardButton(text='‚úçÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥', callback_data='return_sum_coming')
             ]
        ]
    )
    await delete_message_user_bot(message, bot)
    await message.answer(text, reply_markup=keyboard)



# 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
@comingBalanceUser.callback_query(F.data == 'confirm_pay', ComingBalance.confirm_pay)
async def post_trans_to_admin(callback: CallbackQuery,
                              bot: Bot,
                              state: FSMContext):
    data_state = await state.get_data()

    # –û—Ç–≤–µ—Ç –¥–ª—è User
    await delete_message_bot(callback, bot)
    msg = await callback.message.answer(
        'üîÅ –í–∞—à–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è!\n‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.')

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ü–†–ò–•–û–î–ù–û–ô —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –û–ñ–ò–î–ê–ù–ò–ï
    trans_coming = STransactionComingAdd(
        sum=data_state['sum_coming'],
        comment=data_state['comment'],
        status=TransComingStatus.WAIT,
        id_trans_expence_info=None,
        message_id=msg.message_id,
        id_user=data_state['id_user'],
        id_card=int(data_state['card'])
    )
    await add_trans_coming(trans_coming)
    await state.clear()
